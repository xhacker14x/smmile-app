[{"C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\index.js":"1","C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\App.js":"2","C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\reportWebVitals.js":"3","C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\components\\Notification.js":"4","C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\components\\confirmDialog.js":"5","C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\components\\Popup.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":8368,"mtime":1611811763224,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":604,"mtime":1611765737828,"results":"11","hashOfConfig":"8"},{"size":818,"mtime":1611723250886,"results":"12","hashOfConfig":"8"},{"size":415,"mtime":1611807111780,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"rkm7wc",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\index.js",[],["30","31"],"C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\App.js",["32","33","34"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport {\n  Button,\n  LinearProgress,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { TextField } from \"formik-material-ui\";\nimport axios from \"axios\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Popup from \"./components/Popup\";\nimport Notification from \"./components/Notification\";\nimport ConfirmDialog from \"./components/confirmDialog\";\n\ninterface Values {\n  fname: string;\n  lname: string;\n  phone: string;\n  email: string;\n  address: string;\n  city: string;\n  state: string;\n}\n\n//styles\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    display: \"grid\",\n    gridGap: \"0.5em\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\",\n    width: \"600px\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [openPopup, setOpenPopup] = useState(false);\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\",\n  });\n  const [posts, setPosts] = useState([]);\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    title: \"\",\n    subtitle: \"\",\n  });\n  const [formVal, setFormVal] = useState(null);\n\n  //fetch data\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/api/users\")\n      .then((res) => {\n        setPosts(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  });\n\n  //delete item\n  const handleDelete = (id, name) => {\n    setConfirmDialog({\n      ...confirmDialog,\n      isOpen: false,\n    });\n    axios\n      .delete(`http://localhost:8080/api/users/delete/${id}`)\n      .then(function (response) {\n        setNotify({\n          isOpen: true,\n          message: `${name} has been successfully deleted.`,\n          type: \"success\",\n        });\n      });\n  };\n\n  //new item\n  const initVal = {\n    id: \"\",\n    fname: \"\",\n    lname: \"\",\n    phone: \"\",\n    email: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    action: \"addItem\",\n  };\n\n  //update item\n  const openInPopup = (posts) => {\n    setFormVal({\n      id: posts.id,\n      fname: posts.first_name,\n      lname: posts.last_name,\n      phone: posts.phone,\n      action: \"updateItem\",\n    });\n    setOpenPopup(true);\n  };\n\n  //close popup\n  const closePopup = () => {\n    setOpenPopup(false);\n    setFormVal(initVal);\n  };\n\n  return (\n    <React.Fragment>\n      <Notification notify={notify} setNotify={setNotify} />\n\n      <Formik\n        initialValues={formVal || initVal}\n        enableReinitialize\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          setTimeout(() => {\n            setSubmitting(false);\n            let action = JSON.stringify(values.action).slice(1, -1);\n\n            //add new item\n            if (action == \"addItem\") {\n              axios\n                .post(\"http://localhost:8080/api/users/add\", {\n                  //must match with db field names - first_name\n                  first_name: values.fname,\n                  last_name: values.lname,\n                  phone: values.phone,\n                  email: values.email,\n                  address: values.address,\n                  city: values.city,\n                  state: values.state,\n                })\n                .then(function (response) {\n                  setOpenPopup(false);\n                  setNotify({\n                    isOpen: true,\n                    message: `${values.fname} has been successfully added.`,\n                    type: \"success\",\n                  });\n                });\n            }\n            //update item\n            if (action == \"updateItem\") {\n              axios\n                .put(`http://localhost:8080/api/users/update/${values.id}`, {\n                  //must match with db field names - first_name\n                  first_name: values.fname,\n                  last_name: values.lname,\n                  phone: values.phone,\n                })\n                .then(function (response) {\n                  setOpenPopup(false);\n                  setNotify({\n                    isOpen: true,\n                    message: `${values.fname} has been successfully updated.`,\n                    type: \"success\",\n                  });\n                });\n            }\n\n            setFormVal(initVal);\n            resetForm();\n\n          }, 500);\n        }}\n      >\n        {({ submitForm, isSubmitting }) => (\n          <Grid container justify=\"center\" style={{ marginTop: \"60px\" }}>\n            <Grid item xs={6}>\n              {isSubmitting && <LinearProgress />}\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddIcon />}\n                onClick={() => setOpenPopup(true)}\n              >\n                Add New\n              </Button>\n\n              <Popup\n                openPopup={openPopup}\n                setOpenPopup={setOpenPopup}\n                title={\n                  <div style={{ display: \"flex\" }}>\n                    <Typography variant=\"h5\" style={{ flexGrow: \"1\" }}>\n                      Add New Item\n                    </Typography>\n                    <Button\n                      color=\"secondary\"\n                      variant=\"contained\"\n                      onClick={() => {\n                        closePopup();\n                      }}\n                    >\n                      x\n                    </Button>\n                  </div>\n                }\n              >\n                <Form className={classes.form}>\n                  <Field\n                    component={TextField}\n                    type=\"text\"\n                    label=\"Full Name\"\n                    name=\"fname\"\n                  />\n                  <Field\n                    component={TextField}\n                    type=\"text\"\n                    label=\"Last Name\"\n                    name=\"lname\"\n                  />\n                  <Field\n                    component={TextField}\n                    type=\"text\"\n                    label=\"Phone\"\n                    name=\"phone\"\n                  />\n                  <br />\n                  <input type=\"hidden\" name=\"action\" />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={isSubmitting}\n                    onClick={submitForm}\n                    style={{ marginTop: \"20px\" }}\n                  >\n                    Submit\n                  </Button>\n                </Form>\n              </Popup>\n\n              <div>\n                <Notification notify={notify} setNotify={setNotify} />\n                <ConfirmDialog\n                  confirmDialog={confirmDialog}\n                  setConfirmDialog={setConfirmDialog}\n                />\n              </div>\n              <div style={{ marginTop: \"30px\" }}>\n                <ul>\n                  {posts.map((post) => (\n                    <li key={post.id} style={{ marginBottom: \"25px\" }}>\n                      {post.first_name}, {post.last_name}, {post.phone}{\" \"}\n                      &nbsp;&nbsp;\n                      <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={() => {\n                          setConfirmDialog({\n                            isOpen: true,\n                            title:\n                              \"Are you sure you want to delete this record?\",\n                            subTitle: \"You cannot undo this operation\",\n                            onConfirm: () => {\n                              handleDelete(post.id, post.first_name);\n                            },\n                          });\n                        }}\n                      >\n                        Delete\n                      </Button>{\" \"}\n                      &nbsp;{\" \"}\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                          openInPopup(post);\n                        }}\n                      >\n                        Update\n                      </Button>{\" \"}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </Grid>\n          </Grid>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\reportWebVitals.js",[],"C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\components\\Notification.js",[],"C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\components\\confirmDialog.js",[],["35","36"],"C:\\Users\\xhacker14x\\Desktop\\smmile-app\\src\\components\\Popup.js",["37","38","39"],"import React from 'react';\r\nimport {Dialog, DialogTitle, DialogContent, Typography, Button} from '@material-ui/core';\r\n\r\nexport default function Popup(props){\r\n\tconst {title, children, openPopup, setOpenPopup} = props;\r\n\r\n\r\n\treturn(\r\n\t\t<Dialog open={openPopup} maxWidth='md'>\r\n\t\t\t<DialogTitle children={title}>\r\n\t\t\t</DialogTitle>\r\n\t\t\t<DialogContent dividers>\r\n\t\t\t\t{children}\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t)\r\n}",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":17,"column":11,"nodeType":"46","messageId":"47","endLine":17,"endColumn":17},{"ruleId":"48","severity":1,"message":"49","line":126,"column":24,"nodeType":"50","messageId":"51","endLine":126,"endColumn":26},{"ruleId":"48","severity":1,"message":"49","line":148,"column":24,"nodeType":"50","messageId":"51","endLine":148,"endColumn":26},{"ruleId":"40","replacedBy":"52"},{"ruleId":"42","replacedBy":"53"},{"ruleId":"44","severity":1,"message":"54","line":2,"column":45,"nodeType":"46","messageId":"47","endLine":2,"endColumn":55},{"ruleId":"44","severity":1,"message":"55","line":2,"column":57,"nodeType":"46","messageId":"47","endLine":2,"endColumn":63},{"ruleId":"44","severity":1,"message":"56","line":5,"column":37,"nodeType":"46","messageId":"47","endLine":5,"endColumn":49},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Values' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["57"],["58"],"'Typography' is defined but never used.","'Button' is defined but never used.","'setOpenPopup' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]